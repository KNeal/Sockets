CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(gamelift-server-sdk-global)
# Global settings
set(GLOBAL_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)
set(CMAKE_INSTALL_PREFIX ${PROJECT_BINARY_DIR}/install)

message("GLOBAL_OUTPUT_PATH ${GLOBAL_OUTPUT_PATH}")
message("CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX}")

# Sets global output directory for single configuration (GCC)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${GLOBAL_OUTPUT_PATH})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${GLOBAL_OUTPUT_PATH})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${GLOBAL_OUTPUT_PATH})

message("CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}")
message("CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}")
message("CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}")

# Sets global output directory for sub-configurations (msvc, mingw)
foreach(OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES})
    string(TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG)
    message("OUTPUTCONFIG ${OUTPUTCONFIG}")
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${GLOBAL_OUTPUT_PATH})
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${GLOBAL_OUTPUT_PATH})
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${GLOBAL_OUTPUT_PATH})
endforeach(OUTPUTCONFIG CMAKE_CONFIGURATION_TYPES)

#3rdparty Libraries
if(UNIX)
   include(CMakeLists-ExternalProjects.txt)
elseif(WIN32)
   SET(3RDPARTY_LIB_DIR ${CMAKE_SOURCE_DIR}/gamelift-server-sdk/3rdParty/libs/${BUILD_TYPE})
   message("3RDPARTY_LIB_DIR : ${3RDPARTY_LIB_DIR}")
   link_directories(${3RDPARTY_LIB_DIR})
   add_subdirectory(gamelift-server-sdk)
endif()

if(CMAKE_COMPILER_IS_GNUCXX)
  set(CMAKE_CXX_FLAGS -std=c++11)
endif()

# Global link directories
link_directories(${GLOBAL_OUTPUT_PATH})